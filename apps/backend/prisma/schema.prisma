// File: apps/backend/prisma/schema.prisma

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "windows"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Model untuk Pengguna
// Ini adalah model utama yang menyimpan semua data terkait pengguna.
model User {
  id                    String             @id @default(uuid())
  walletAddress         String             @unique
  nonce                 String?
  points                Int                @default(0)
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt

  // Data Akun Sosial Media (untuk binding)
  telegramHandle        String?            @unique
  discordId             String?            @unique
  twitterHandle         String?            @unique
  lineId                String?            @unique

  // Data Blockchain (SBT, dll.)
  sbtTokenId            String?
  sbtContractAddress    String?

  // Data Referral
  referredById          String?
  referredBy            User?              @relation("Referrals", fields: [referredById], references: [id])
  referrals             User[]             @relation("Referrals")
  referralCode          String             @unique @default(uuid())

  // Data Airdrop
  isEligibleForAirdrop  Boolean            @default(false)
  hasClaimedAirdrop     Boolean            @default(false)
  airdropAmount         Int                @default(0)

  // Relasi ke model lain
  completedMissions     CompletedMission[]
  deFiProfile           DeFiProfile?
  leaderboardEntries    LeaderboardEntry[] // Relasi ke entri leaderboard
}

// Model untuk Misi
// Menyimpan daftar semua misi yang tersedia di platform.
model Mission {
  id                Int                @id @default(autoincrement())
  title             String
  description       String
  points            Int
  type              String             @unique // ID unik untuk logika verifikasi, misal: 'SWAP_VOLUME_100'
  isActive          Boolean            @default(true)
  targetId          String?            // ID target untuk misi sosial, misal: ID Tweet, ID Grup Telegram

  completedBy       CompletedMission[]
}

// Model Profil DeFi
// Mencatat semua metrik on-chain pengguna yang dilacak oleh IndexerService.
model DeFiProfile {
  id                      Int      @id @default(autoincrement())
  userId                  String   @unique
  user                    User     @relation(fields: [userId], references: [id])
  
  totalSwapVolume         Decimal  @default(0)
  swapCount               Int      @default(0)
  
  totalStakingVolume      Decimal  @default(0)
  harvestCount            Int      @default(0)

  totalLendSupplyVolume   Decimal  @default(0)
  totalLendBorrowVolume   Decimal  @default(0)

  totalAmmLiquidityVolume Decimal  @default(0)
  
  lastUpdatedAt           DateTime @updatedAt
}

// Model Perantara untuk Misi yang Selesai
// Mencatat rekor bahwa seorang user telah menyelesaikan sebuah misi.
model CompletedMission {
  id          Int      @id @default(autoincrement())
  userId      String
  missionId   Int
  completedAt DateTime @default(now())
  
  user        User     @relation(fields: [userId], references: [id])
  mission     Mission  @relation(fields: [missionId], references: [id])

  @@unique([userId, missionId]) // Memastikan user hanya bisa menyelesaikan satu misi sekali
}

// --- MODEL BARU UNTUK LEADERBOARD ---

// Model untuk mendefinisikan berbagai jenis leaderboard
model Leaderboard {
  id          Int      @id @default(autoincrement())
  name        String   @unique // Misal: "Poin Global", "Volume Swap Mingguan"
  description String?
  type        String   // Misal: "POINTS", "SWAP_VOLUME"
  resetCycle  String?  // Misal: "WEEKLY", "MONTHLY", "NEVER"
  
  entries     LeaderboardEntry[]
}

// Model untuk menyimpan entri peringkat pengguna di setiap leaderboard
model LeaderboardEntry {
  id            Int      @id @default(autoincrement())
  leaderboardId Int
  leaderboard   Leaderboard @relation(fields: [leaderboardId], references: [id])
  
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  
  rank          Int
  score         Decimal  // Menggunakan Decimal agar bisa menyimpan poin (Int) dan volume (Decimal)
  
  updatedAt     DateTime @updatedAt

  @@unique([leaderboardId, userId]) // User hanya punya satu entri per leaderboard
}
