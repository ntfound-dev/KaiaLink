generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "windows"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Model untuk Pengguna
model User {
  id                    String             @id @default(uuid())
  walletAddress         String             @unique
  nonce                 String?
  points                Int                @default(0)
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt

  telegramHandle        String?            @unique
  discordId             String?            @unique
  twitterHandle         String?            @unique
  lineId                String?            @unique

  sbtTokenId            String?
  sbtContractAddress    String?

  referredById          String?
  referredBy            User?              @relation("Referrals", fields: [referredById], references: [id])
  referrals             User[]             @relation("Referrals")
  referralCode          String             @unique @default(uuid())

  isEligibleForAirdrop  Boolean            @default(false)
  hasClaimedAirdrop     Boolean            @default(false)
  airdropAmount         Int                @default(0)

  completedMissions     CompletedMission[]
  deFiProfile           DeFiProfile?
  leaderboardEntries    LeaderboardEntry[]
}

// Misi
model Mission {
  id                Int                @id @default(autoincrement())
  title             String
  description       String
  points            Int
  type              String             @unique
  isActive          Boolean            @default(true)
  targetId          String?

  completedBy       CompletedMission[]
}

// Profil DeFi
model DeFiProfile {
  id                      Int      @id @default(autoincrement())
  userId                  String   @unique
  user                    User     @relation(fields: [userId], references: [id])
  
  totalSwapVolume         Decimal  @default("0")
  swapCount               Int      @default(0)
  
  totalStakingVolume      Decimal  @default("0")
  harvestCount            Int      @default(0)

  totalLendSupplyVolume   Decimal  @default("0")
  totalLendBorrowVolume   Decimal  @default("0")

  totalAmmLiquidityVolume Decimal  @default("0")
  
  lastUpdatedAt           DateTime @updatedAt

  // Tambahan untuk rekonsiliasi/reorg:
  lastUpdatedBlock        BigInt?
}

// Completed missions
model CompletedMission {
  id          Int      @id @default(autoincrement())
  userId      String
  missionId   Int
  completedAt DateTime @default(now())
  
  user        User     @relation(fields: [userId], references: [id])
  mission     Mission  @relation(fields: [missionId], references: [id])

  @@unique([userId, missionId])
}

// Leaderboard models
model Leaderboard {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  type        String
  resetCycle  String?
  
  entries     LeaderboardEntry[]
}

model LeaderboardEntry {
  id            Int      @id @default(autoincrement())
  leaderboardId Int
  leaderboard   Leaderboard @relation(fields: [leaderboardId], references: [id])
  
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  
  rank          Int
  score         Decimal

  updatedAt     DateTime @updatedAt

  @@unique([leaderboardId, userId])
}

// NEW: EventProcessed untuk idempotency dan reorg handling
model EventProcessed {
  txHash       String
  logIndex     Int
  contractAddr String
  eventName    String
  blockNumber  BigInt
  confirmed    Boolean   @default(false)
  processedAt  DateTime  @default(now())

  @@id([txHash, logIndex])
  @@index([contractAddr])
}
